"RandomTree.t:$(n)","random starting tree"
"ClusterTree.t:$(n)","cluster starting tree","clusterType"
"NewickTree.t:$(n)","Newick starting tree"

"StrictClock.c:$(n)","strict clock"," with clock rate ","clockRate.c:$(n)"
"ExponentialRelaxedClock.c:$(n)","uncorrelated exponential relaxed clock"," with ","ucedMean.c:$(n)"
"RelaxedClock.c:$(n)","uncorrelated log-normal relaxed clock"," with ","ucldMean.c:$(n)"," and ","ucldStdev.c:$(n)"
"RandomLocalClock.c:$(n)","random local clock"," with ","meanClockRate.c:$(n)"

"beast.evolution.substitutionmodel.JukesCantor","JC69.s:$(n)","Jukes Cantor"
"beast.evolution.substitutionmodel.HKY","hky.s:$(n)"," with ","kappa.s:$(n)"," and ","frequencies"
"beast.evolution.substitutionmodel.TN93","tn93.s:$(n)"," with ","kappa1.s:$(n)"," and ","kappa2.s:$(n)"
"beast.evolution.substitutionmodel.GTR","gtr.s:$(n)"," with ","rateAC.s:$(n)","&comma; ","rateAG.s:$(n)","&comma; ","rateAT.s:$(n)","&comma; ","rateCG.s:$(n)","&comma; ","rateCT.s:$(n)"," and ","rateGT.s:$(n)"
"Blosum62.s:$(n)"
"Dayhoff.s:$(n)"
"JTT.s:$(n)"
"CPREV.s:$(n)"
"MTREV.s:$(n)"
"WAG.s:$(n)"
"MutationDeathModel.s:$(n)","stochastic Dollo"," model"
"estimatedFreqs.s:$(n)","estimated"," frequencies"
"empiricalFreqs.s:$(n)","empirical"," frequencies"
"equalFreqs.s:$(n)","equal"," frequencies"

"YuleModel.t:$(n)","Yule model"," with birth rate ","birthDiffRate"
"CalibratedYuleModel.t:$(n)","Calibrated Yule model"," with birth rate ","birthRate"
"BirthDeath.t:$(n)","birth death model"," with ","type","&comma; ","relativeDeathRate"," and ","sampleProbability"
"CoalescentConstant.t:$(n)","constant coalescent"," tree prior with population size ","popSize.t:$(n)"
"CoalescentExponential.t:$(n)","exponential coalescent"," tree prior with population size ","ePopSize.t:$(n)"," and growth rate ","growthRate.t:$(n)"
"BayesianSkyline.t:$(n)","Bayesian skyline"," tree prior with population size ","bPopSizes.t:$(n)"
"ExtendedBayesianSkyline.t:$(n)","extended Bayesian skyline"," tree prior with population size ","popSizes.alltrees"," and population mean ","populationMean.alltrees"

"beast.math.distributions.Uniform","uniformly"," distributed ","(lower=","lower"," and upper=","upper",")"
"beast.math.distributions.Normal","normally"," distributed ","(mean=","mean"," and sigma=",  "sigma",")"
"beast.math.distributions.OneOnX","1/X"," distributed"
"beast.math.distributions.LogNormalDistributionModel","log-normally"," distributed ","(mean log=","M"," and stdev log=","S",")"
"beast.math.distributions.Exponential","exponentially"," distributed ","(mean=","mean",")"
"beast.math.distributions.Gamma","gamma"," distributed ","(alpha=","alpha"," and beta=","beta",")"
"beast.math.distributions.Beta","beta"," distributed ","(alpha=","alpha"," and beta=","beta",")"
"beast.math.distributions.LaplaceDistribution","Laplace"," distributed ","(mu=","mu"," and scale=","scale",")"
"beast.math.distributions.InverseGamma","inverse Gamma"," distributed ","(alpha=","alpha"," and beta=","beta",")"
"beast.math.distributions.Poisson","Poisson"," distributed ","(lambda=","lambda",")"
